<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.czqu.taskmaster.dao.mapper.ExchangesMapper">
  <resultMap id="BaseResultMap" type="net.czqu.taskmaster.dao.pojo.Exchanges">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="bank_id" jdbcType="TINYINT" property="bankId" />
    <result column="currency_type" jdbcType="TINYINT" property="currencyType" />
    <result column="reference" jdbcType="DECIMAL" property="reference" />
    <result column="foreign_buy" jdbcType="DECIMAL" property="foreignBuy" />
    <result column="foreign_sell" jdbcType="DECIMAL" property="foreignSell" />
    <result column="cash_buy" jdbcType="DECIMAL" property="cashBuy" />
    <result column="cash_sell" jdbcType="DECIMAL" property="cashSell" />
    <result column="publish_time" jdbcType="TIMESTAMP" property="publishTime" />
    <result column="creat_time" jdbcType="TIMESTAMP" property="creatTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, bank_id, currency_type, reference, foreign_buy, foreign_sell, cash_buy, cash_sell, 
    publish_time, creat_time
  </sql>
  <select id="selectByExample" parameterType="net.czqu.taskmaster.dao.example.ExchangesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from exchanges
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from exchanges
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example != null and example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from exchanges
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from exchanges
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from exchanges
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="net.czqu.taskmaster.dao.example.ExchangesExample">
    delete from exchanges
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.czqu.taskmaster.dao.pojo.Exchanges">
    insert into exchanges (id, bank_id, currency_type, 
      reference, foreign_buy, foreign_sell, 
      cash_buy, cash_sell, publish_time, 
      creat_time)
    values (#{id,jdbcType=INTEGER}, #{bankId,jdbcType=TINYINT}, #{currencyType,jdbcType=TINYINT}, 
      #{reference,jdbcType=DECIMAL}, #{foreignBuy,jdbcType=DECIMAL}, #{foreignSell,jdbcType=DECIMAL}, 
      #{cashBuy,jdbcType=DECIMAL}, #{cashSell,jdbcType=DECIMAL}, #{publishTime,jdbcType=TIMESTAMP}, 
      #{creatTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into exchanges
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.bankId != null">
            bank_id,
          </if>
          <if test="record.currencyType != null">
            currency_type,
          </if>
          <if test="record.reference != null">
            reference,
          </if>
          <if test="record.foreignBuy != null">
            foreign_buy,
          </if>
          <if test="record.foreignSell != null">
            foreign_sell,
          </if>
          <if test="record.cashBuy != null">
            cash_buy,
          </if>
          <if test="record.cashSell != null">
            cash_sell,
          </if>
          <if test="record.publishTime != null">
            publish_time,
          </if>
          <if test="record.creatTime != null">
            creat_time,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.bankId != null">
            #{record.bankId,jdbcType=TINYINT},
          </if>
          <if test="record.currencyType != null">
            #{record.currencyType,jdbcType=TINYINT},
          </if>
          <if test="record.reference != null">
            #{record.reference,jdbcType=DECIMAL},
          </if>
          <if test="record.foreignBuy != null">
            #{record.foreignBuy,jdbcType=DECIMAL},
          </if>
          <if test="record.foreignSell != null">
            #{record.foreignSell,jdbcType=DECIMAL},
          </if>
          <if test="record.cashBuy != null">
            #{record.cashBuy,jdbcType=DECIMAL},
          </if>
          <if test="record.cashSell != null">
            #{record.cashSell,jdbcType=DECIMAL},
          </if>
          <if test="record.publishTime != null">
            #{record.publishTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.creatTime != null">
            #{record.creatTime,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="net.czqu.taskmaster.dao.example.ExchangesExample" resultType="java.lang.Long">
    select count(*) from exchanges
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update exchanges
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.bankId != null">
            bank_id = #{record.bankId,jdbcType=TINYINT},
          </if>
          <if test="record.currencyType != null">
            currency_type = #{record.currencyType,jdbcType=TINYINT},
          </if>
          <if test="record.reference != null">
            reference = #{record.reference,jdbcType=DECIMAL},
          </if>
          <if test="record.foreignBuy != null">
            foreign_buy = #{record.foreignBuy,jdbcType=DECIMAL},
          </if>
          <if test="record.foreignSell != null">
            foreign_sell = #{record.foreignSell,jdbcType=DECIMAL},
          </if>
          <if test="record.cashBuy != null">
            cash_buy = #{record.cashBuy,jdbcType=DECIMAL},
          </if>
          <if test="record.cashSell != null">
            cash_sell = #{record.cashSell,jdbcType=DECIMAL},
          </if>
          <if test="record.publishTime != null">
            publish_time = #{record.publishTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.creatTime != null">
            creat_time = #{record.creatTime,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update exchanges
    set id = #{record.id,jdbcType=INTEGER},
      bank_id = #{record.bankId,jdbcType=TINYINT},
      currency_type = #{record.currencyType,jdbcType=TINYINT},
      reference = #{record.reference,jdbcType=DECIMAL},
      foreign_buy = #{record.foreignBuy,jdbcType=DECIMAL},
      foreign_sell = #{record.foreignSell,jdbcType=DECIMAL},
      cash_buy = #{record.cashBuy,jdbcType=DECIMAL},
      cash_sell = #{record.cashSell,jdbcType=DECIMAL},
      publish_time = #{record.publishTime,jdbcType=TIMESTAMP},
      creat_time = #{record.creatTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update exchanges
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.bankId != null">
            bank_id = #{record.bankId,jdbcType=TINYINT},
          </if>
          <if test="record.currencyType != null">
            currency_type = #{record.currencyType,jdbcType=TINYINT},
          </if>
          <if test="record.reference != null">
            reference = #{record.reference,jdbcType=DECIMAL},
          </if>
          <if test="record.foreignBuy != null">
            foreign_buy = #{record.foreignBuy,jdbcType=DECIMAL},
          </if>
          <if test="record.foreignSell != null">
            foreign_sell = #{record.foreignSell,jdbcType=DECIMAL},
          </if>
          <if test="record.cashBuy != null">
            cash_buy = #{record.cashBuy,jdbcType=DECIMAL},
          </if>
          <if test="record.cashSell != null">
            cash_sell = #{record.cashSell,jdbcType=DECIMAL},
          </if>
          <if test="record.publishTime != null">
            publish_time = #{record.publishTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.creatTime != null">
            creat_time = #{record.creatTime,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.czqu.taskmaster.dao.pojo.Exchanges">
    update exchanges
    set bank_id = #{bankId,jdbcType=TINYINT},
      currency_type = #{currencyType,jdbcType=TINYINT},
      reference = #{reference,jdbcType=DECIMAL},
      foreign_buy = #{foreignBuy,jdbcType=DECIMAL},
      foreign_sell = #{foreignSell,jdbcType=DECIMAL},
      cash_buy = #{cashBuy,jdbcType=DECIMAL},
      cash_sell = #{cashSell,jdbcType=DECIMAL},
      publish_time = #{publishTime,jdbcType=TIMESTAMP},
      creat_time = #{creatTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="net.czqu.taskmaster.dao.example.ExchangesExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from exchanges
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from exchanges
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into exchanges
    (id, bank_id, currency_type, reference, foreign_buy, foreign_sell, cash_buy, cash_sell, 
      publish_time, creat_time)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=INTEGER}, #{item.bankId,jdbcType=TINYINT}, #{item.currencyType,jdbcType=TINYINT}, 
        #{item.reference,jdbcType=DECIMAL}, #{item.foreignBuy,jdbcType=DECIMAL}, #{item.foreignSell,jdbcType=DECIMAL}, 
        #{item.cashBuy,jdbcType=DECIMAL}, #{item.cashSell,jdbcType=DECIMAL}, #{item.publishTime,jdbcType=TIMESTAMP}, 
        #{item.creatTime,jdbcType=TIMESTAMP})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into exchanges (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=INTEGER}
        </if>
        <if test="'bank_id'.toString() == column.value">
          #{item.bankId,jdbcType=TINYINT}
        </if>
        <if test="'currency_type'.toString() == column.value">
          #{item.currencyType,jdbcType=TINYINT}
        </if>
        <if test="'reference'.toString() == column.value">
          #{item.reference,jdbcType=DECIMAL}
        </if>
        <if test="'foreign_buy'.toString() == column.value">
          #{item.foreignBuy,jdbcType=DECIMAL}
        </if>
        <if test="'foreign_sell'.toString() == column.value">
          #{item.foreignSell,jdbcType=DECIMAL}
        </if>
        <if test="'cash_buy'.toString() == column.value">
          #{item.cashBuy,jdbcType=DECIMAL}
        </if>
        <if test="'cash_sell'.toString() == column.value">
          #{item.cashSell,jdbcType=DECIMAL}
        </if>
        <if test="'publish_time'.toString() == column.value">
          #{item.publishTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'creat_time'.toString() == column.value">
          #{item.creatTime,jdbcType=TIMESTAMP}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>